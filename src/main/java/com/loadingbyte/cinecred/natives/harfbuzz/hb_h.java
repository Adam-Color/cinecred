// Generated by jextract

package com.loadingbyte.cinecred.natives.harfbuzz;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class hb_h  {

    static {
    }

    static final SymbolLookup LIBRARIES = RuntimeHelper.lookup();    /* package-private */ hb_h() {}
    public static int HB_DIRECTION_LTR() {
        return (int)4L;
    }
    public static int HB_DIRECTION_RTL() {
        return (int)5L;
    }
    public static MethodHandle hb_language_from_string$MH() {
        return RuntimeHelper.requireNonNull(constants$0.hb_language_from_string$MH,"hb_language_from_string");
    }
    public static MemoryAddress hb_language_from_string ( Addressable str,  int len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.hb_language_from_string$MH, "hb_language_from_string");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(str.address(), len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int HB_SCRIPT_COMMON() {
        return (int)1517910393L;
    }
    public static int HB_SCRIPT_INHERITED() {
        return (int)1516858984L;
    }
    public static int HB_SCRIPT_ARABIC() {
        return (int)1098015074L;
    }
    public static int HB_SCRIPT_ARMENIAN() {
        return (int)1098018158L;
    }
    public static int HB_SCRIPT_BENGALI() {
        return (int)1113943655L;
    }
    public static int HB_SCRIPT_CYRILLIC() {
        return (int)1132032620L;
    }
    public static int HB_SCRIPT_DEVANAGARI() {
        return (int)1147500129L;
    }
    public static int HB_SCRIPT_GEORGIAN() {
        return (int)1197830002L;
    }
    public static int HB_SCRIPT_GREEK() {
        return (int)1198679403L;
    }
    public static int HB_SCRIPT_GUJARATI() {
        return (int)1198877298L;
    }
    public static int HB_SCRIPT_GURMUKHI() {
        return (int)1198879349L;
    }
    public static int HB_SCRIPT_HANGUL() {
        return (int)1214344807L;
    }
    public static int HB_SCRIPT_HAN() {
        return (int)1214344809L;
    }
    public static int HB_SCRIPT_HEBREW() {
        return (int)1214603890L;
    }
    public static int HB_SCRIPT_HIRAGANA() {
        return (int)1214870113L;
    }
    public static int HB_SCRIPT_KANNADA() {
        return (int)1265525857L;
    }
    public static int HB_SCRIPT_KATAKANA() {
        return (int)1264676449L;
    }
    public static int HB_SCRIPT_LAO() {
        return (int)1281453935L;
    }
    public static int HB_SCRIPT_LATIN() {
        return (int)1281455214L;
    }
    public static int HB_SCRIPT_MALAYALAM() {
        return (int)1298954605L;
    }
    public static int HB_SCRIPT_ORIYA() {
        return (int)1332902241L;
    }
    public static int HB_SCRIPT_TAMIL() {
        return (int)1415671148L;
    }
    public static int HB_SCRIPT_TELUGU() {
        return (int)1415933045L;
    }
    public static int HB_SCRIPT_THAI() {
        return (int)1416126825L;
    }
    public static int HB_SCRIPT_TIBETAN() {
        return (int)1416192628L;
    }
    public static int HB_SCRIPT_BOPOMOFO() {
        return (int)1114599535L;
    }
    public static int HB_SCRIPT_CANADIAN_SYLLABICS() {
        return (int)1130458739L;
    }
    public static int HB_SCRIPT_CHEROKEE() {
        return (int)1130915186L;
    }
    public static int HB_SCRIPT_ETHIOPIC() {
        return (int)1165256809L;
    }
    public static int HB_SCRIPT_KHMER() {
        return (int)1265134962L;
    }
    public static int HB_SCRIPT_MONGOLIAN() {
        return (int)1299148391L;
    }
    public static int HB_SCRIPT_MYANMAR() {
        return (int)1299803506L;
    }
    public static int HB_SCRIPT_OGHAM() {
        return (int)1332175213L;
    }
    public static int HB_SCRIPT_RUNIC() {
        return (int)1383427698L;
    }
    public static int HB_SCRIPT_SINHALA() {
        return (int)1399418472L;
    }
    public static int HB_SCRIPT_SYRIAC() {
        return (int)1400468067L;
    }
    public static int HB_SCRIPT_THAANA() {
        return (int)1416126817L;
    }
    public static int HB_SCRIPT_YI() {
        return (int)1500080489L;
    }
    public static int HB_SCRIPT_DESERET() {
        return (int)1148416628L;
    }
    public static int HB_SCRIPT_GOTHIC() {
        return (int)1198486632L;
    }
    public static int HB_SCRIPT_OLD_ITALIC() {
        return (int)1232363884L;
    }
    public static int HB_SCRIPT_BUHID() {
        return (int)1114990692L;
    }
    public static int HB_SCRIPT_HANUNOO() {
        return (int)1214344815L;
    }
    public static int HB_SCRIPT_TAGALOG() {
        return (int)1416064103L;
    }
    public static int HB_SCRIPT_TAGBANWA() {
        return (int)1415669602L;
    }
    public static int HB_SCRIPT_COPTIC() {
        return (int)1131376756L;
    }
    public static int HB_SCRIPT_INVALID() {
        return (int)0L;
    }
    public static MethodHandle hb_feature_from_string$MH() {
        return RuntimeHelper.requireNonNull(constants$0.hb_feature_from_string$MH,"hb_feature_from_string");
    }
    public static int hb_feature_from_string ( Addressable str,  int len,  Addressable feature) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.hb_feature_from_string$MH, "hb_feature_from_string");
        try {
            return (int)mh$.invokeExact(str.address(), len, feature.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int HB_MEMORY_MODE_WRITABLE() {
        return (int)2L;
    }
    public static MethodHandle hb_blob_create$MH() {
        return RuntimeHelper.requireNonNull(constants$0.hb_blob_create$MH,"hb_blob_create");
    }
    public static MemoryAddress hb_blob_create ( Addressable data,  int length,  int mode,  Addressable user_data,  Addressable destroy) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.hb_blob_create$MH, "hb_blob_create");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(data.address(), length, mode, user_data.address(), destroy.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle hb_face_create_for_tables$MH() {
        return RuntimeHelper.requireNonNull(constants$1.hb_face_create_for_tables$MH,"hb_face_create_for_tables");
    }
    public static MemoryAddress hb_face_create_for_tables ( Addressable reference_table_func,  Addressable user_data,  Addressable destroy) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1.hb_face_create_for_tables$MH, "hb_face_create_for_tables");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(reference_table_func.address(), user_data.address(), destroy.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle hb_face_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$1.hb_face_destroy$MH,"hb_face_destroy");
    }
    public static void hb_face_destroy ( Addressable face) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1.hb_face_destroy$MH, "hb_face_destroy");
        try {
            mh$.invokeExact(face.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle hb_font_create$MH() {
        return RuntimeHelper.requireNonNull(constants$1.hb_font_create$MH,"hb_font_create");
    }
    public static MemoryAddress hb_font_create ( Addressable face) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1.hb_font_create$MH, "hb_font_create");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(face.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle hb_font_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$1.hb_font_destroy$MH,"hb_font_destroy");
    }
    public static void hb_font_destroy ( Addressable font) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1.hb_font_destroy$MH, "hb_font_destroy");
        try {
            mh$.invokeExact(font.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle hb_font_set_scale$MH() {
        return RuntimeHelper.requireNonNull(constants$1.hb_font_set_scale$MH,"hb_font_set_scale");
    }
    public static void hb_font_set_scale ( Addressable font,  int x_scale,  int y_scale) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1.hb_font_set_scale$MH, "hb_font_set_scale");
        try {
            mh$.invokeExact(font.address(), x_scale, y_scale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle hb_buffer_create$MH() {
        return RuntimeHelper.requireNonNull(constants$2.hb_buffer_create$MH,"hb_buffer_create");
    }
    public static MemoryAddress hb_buffer_create () {
        var mh$ = RuntimeHelper.requireNonNull(constants$2.hb_buffer_create$MH, "hb_buffer_create");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle hb_buffer_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$2.hb_buffer_destroy$MH,"hb_buffer_destroy");
    }
    public static void hb_buffer_destroy ( Addressable buffer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$2.hb_buffer_destroy$MH, "hb_buffer_destroy");
        try {
            mh$.invokeExact(buffer.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle hb_buffer_set_direction$MH() {
        return RuntimeHelper.requireNonNull(constants$2.hb_buffer_set_direction$MH,"hb_buffer_set_direction");
    }
    public static void hb_buffer_set_direction ( Addressable buffer,  int direction) {
        var mh$ = RuntimeHelper.requireNonNull(constants$2.hb_buffer_set_direction$MH, "hb_buffer_set_direction");
        try {
            mh$.invokeExact(buffer.address(), direction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle hb_buffer_set_script$MH() {
        return RuntimeHelper.requireNonNull(constants$2.hb_buffer_set_script$MH,"hb_buffer_set_script");
    }
    public static void hb_buffer_set_script ( Addressable buffer,  int script) {
        var mh$ = RuntimeHelper.requireNonNull(constants$2.hb_buffer_set_script$MH, "hb_buffer_set_script");
        try {
            mh$.invokeExact(buffer.address(), script);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle hb_buffer_set_language$MH() {
        return RuntimeHelper.requireNonNull(constants$2.hb_buffer_set_language$MH,"hb_buffer_set_language");
    }
    public static void hb_buffer_set_language ( Addressable buffer,  Addressable language) {
        var mh$ = RuntimeHelper.requireNonNull(constants$2.hb_buffer_set_language$MH, "hb_buffer_set_language");
        try {
            mh$.invokeExact(buffer.address(), language.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int HB_BUFFER_CLUSTER_LEVEL_MONOTONE_CHARACTERS() {
        return (int)1L;
    }
    public static MethodHandle hb_buffer_set_cluster_level$MH() {
        return RuntimeHelper.requireNonNull(constants$2.hb_buffer_set_cluster_level$MH,"hb_buffer_set_cluster_level");
    }
    public static void hb_buffer_set_cluster_level ( Addressable buffer,  int cluster_level) {
        var mh$ = RuntimeHelper.requireNonNull(constants$2.hb_buffer_set_cluster_level$MH, "hb_buffer_set_cluster_level");
        try {
            mh$.invokeExact(buffer.address(), cluster_level);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle hb_buffer_add_utf16$MH() {
        return RuntimeHelper.requireNonNull(constants$3.hb_buffer_add_utf16$MH,"hb_buffer_add_utf16");
    }
    public static void hb_buffer_add_utf16 ( Addressable buffer,  Addressable text,  int text_length,  int item_offset,  int item_length) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.hb_buffer_add_utf16$MH, "hb_buffer_add_utf16");
        try {
            mh$.invokeExact(buffer.address(), text.address(), text_length, item_offset, item_length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle hb_buffer_get_length$MH() {
        return RuntimeHelper.requireNonNull(constants$3.hb_buffer_get_length$MH,"hb_buffer_get_length");
    }
    public static int hb_buffer_get_length ( Addressable buffer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.hb_buffer_get_length$MH, "hb_buffer_get_length");
        try {
            return (int)mh$.invokeExact(buffer.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle hb_buffer_get_glyph_infos$MH() {
        return RuntimeHelper.requireNonNull(constants$3.hb_buffer_get_glyph_infos$MH,"hb_buffer_get_glyph_infos");
    }
    public static MemoryAddress hb_buffer_get_glyph_infos ( Addressable buffer,  Addressable length) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.hb_buffer_get_glyph_infos$MH, "hb_buffer_get_glyph_infos");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(buffer.address(), length.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle hb_buffer_get_glyph_positions$MH() {
        return RuntimeHelper.requireNonNull(constants$3.hb_buffer_get_glyph_positions$MH,"hb_buffer_get_glyph_positions");
    }
    public static MemoryAddress hb_buffer_get_glyph_positions ( Addressable buffer,  Addressable length) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.hb_buffer_get_glyph_positions$MH, "hb_buffer_get_glyph_positions");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(buffer.address(), length.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle hb_shape$MH() {
        return RuntimeHelper.requireNonNull(constants$3.hb_shape$MH,"hb_shape");
    }
    public static void hb_shape ( Addressable font,  Addressable buffer,  Addressable features,  int num_features) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.hb_shape$MH, "hb_shape");
        try {
            mh$.invokeExact(font.address(), buffer.address(), features.address(), num_features);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}


