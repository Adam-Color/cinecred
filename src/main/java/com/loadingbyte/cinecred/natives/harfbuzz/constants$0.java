// Generated by jextract

package com.loadingbyte.cinecred.natives.harfbuzz;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
class constants$0 {

    static final FunctionDescriptor hb_language_from_string$FUNC = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT
    );
    static final MethodHandle hb_language_from_string$MH = RuntimeHelper.downcallHandle(
        hb_h.LIBRARIES, "hb_language_from_string",
        "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        constants$0.hb_language_from_string$FUNC, false
    );
    static final FunctionDescriptor hb_destroy_func_t$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final MethodHandle hb_destroy_func_t$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        constants$0.hb_destroy_func_t$FUNC, false
    );
    static final FunctionDescriptor hb_feature_from_string$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final MethodHandle hb_feature_from_string$MH = RuntimeHelper.downcallHandle(
        hb_h.LIBRARIES, "hb_feature_from_string",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        constants$0.hb_feature_from_string$FUNC, false
    );
    static final FunctionDescriptor hb_blob_create$FUNC = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle hb_blob_create$MH = RuntimeHelper.downcallHandle(
        hb_h.LIBRARIES, "hb_blob_create",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        constants$0.hb_blob_create$FUNC, false
    );
    static final FunctionDescriptor hb_reference_table_func_t$FUNC = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
}


